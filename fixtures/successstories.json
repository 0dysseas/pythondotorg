[
{
    "fields": {
        "slug": "software-development", 
        "name": "Software Development"
    }, 
    "model": "successstories.storycategory", 
    "pk": 1
},
{
    "fields": {
        "slug": "arts", 
        "name": "Arts"
    }, 
    "model": "successstories.storycategory", 
    "pk": 2
},
{
    "fields": {
        "slug": "business", 
        "name": "Business"
    }, 
    "model": "successstories.storycategory", 
    "pk": 3
},
{
    "fields": {
        "slug": "education", 
        "name": "Education"
    }, 
    "model": "successstories.storycategory", 
    "pk": 4
},
{
    "fields": {
        "slug": "government", 
        "name": "Government"
    }, 
    "model": "successstories.storycategory", 
    "pk": 5
},
{
    "fields": {
        "slug": "scientific", 
        "name": "Scientific"
    }, 
    "model": "successstories.storycategory", 
    "pk": 6
},
{
    "fields": {
        "slug": "engineering", 
        "name": "Engineering"
    }, 
    "model": "successstories.storycategory", 
    "pk": 7
},
{
    "fields": {
        "company_url": "http://www.rackspace.com/", 
        "author": "Nick Borko", 
        "content_markup_type": "html", 
        "is_published": true, 
        "slug": "test-success-story", 
        "updated": "2013-08-01T18:53:44.551Z", 
        "_content_rendered": "<h2>Introduction</h2>\r\n<p>To be the industry leader in Managed Hosting, you have to be fast and\r\nflexible. By using Python to implement our enterprise data systems,\r\n<a class=\"reference external\" href=\"http://www.rackspace.com/\">Rackspace</a> can quickly and effectively change its internal systems to keep up with shifts in the industry and in our own business processes.\r\nWe do this through a central customer information system called \"CORE,\"\r\nwhich is used both for Customer Relationship Management (CRM) and\r\nEnterprise Resource Planning (ERP). Python and CORE are key factors\r\nthat enable Rackspace to provide our Fanatical Support(tm) and faster\r\ncustomer service.</p>\r\n\r\n<h2>Background</h2>\r\n<p>Rackspace's central customer database started as a simple ERP system to\r\nprovision and track managed servers. It began humbly, as a small\r\ncollection of PHP pages that did the job nicely for the few hundred\r\nservers that was the beginning of Rackspace's customer base.</p>\r\n<p>As Rackspace grew, that small PHP system became the center of business\r\nat Rackspace. Every time an opportunity to automate a process presented\r\nitself, it was rolled into that system.</p>\r\n<p>After a couple of years, the result was a big, un-maintainable mess of\r\nthousands of PHP pages and modules that had been written and maintained\r\nprimarily by one person. The limits of PHP (then version 3) had been\r\nstretched thin, the system was too much for one person to maintain,\r\nand it was difficult to bring in new people to help with it.</p>\r\n<p><em>Rackspace Managed Hosting provides customized servers in state-of-the-art\r\ndata centers</em> <a class=\"reference external\" href=\"/files/success/rackspace/datacenter.jpg\">Zoom in</a></p>\r\n<p>Our first attempt to update the system came when PHP version 4 was\r\nreleased. This release promised better object oriented capabilities,\r\nand the time was right for Rackspace to dedicate more people to the\r\nproject.</p>\r\n<p>The system was totally redesigned from the ground up, including new\r\ndatabase schemas and application design strategies. At this time we\r\nre-dubbed the project \"CORE,\" an acronym for Core Objects Reused\r\nEverywhere, in order to reflect the overall design goal for CORE:\r\nmodularity and reusability across all systems in the company. With that\r\ngoal in mind, our team went to work using the object oriented features\r\nof PHP.</p>\r\n<p>While we were able to re-fit the application and add increased\r\nfunctionality, the project ultimately failed due in large part to the\r\nproblems encountered while using the object framework provided by PHP.</p>\r\n<p>Memory leaks, inconsistent interfaces, inconsistent internal data model,\r\nrandomly freed objects, multiple object copies despite explicit use of\r\nreferences, internal PHP errors, and untraceable code failures all but\r\nmade the task impossible to accomplish in PHP.</p>\r\n<p>Even after we achieved a relatively stable code base, we were nowhere\r\nnear our goal of Core Objects Reused Everywhere because we had to\r\ndepart from pure object-oriented methods just to work around the\r\nproblems inherent in PHP. It became clear that PHP was unsuitable for\r\nour large scale, mission critical projects. A new solution had to be\r\nfound.</p>\r\n\r\n<h2>Python in CORE</h2>\r\n<p>We had always considered Python to be an excellent candidate for\r\nimplementing our enterprise system, but it was initially passed over in\r\nfavor of building upon the existing (vast) code base we already had in\r\nPHP. At that time, we felt that PHP could be used successfully in CORE\r\nby introducing a better structured system design.</p>\r\n<p>Unfortunately, that wasn't enough to overcome our other problems with\r\nPHP, so we re-evaluated our situation. The first alpha version of Python\r\n2.2 had recently been released, and we decided to begin work on a new\r\nCORE framework using the new features that were available in that\r\nversion.</p>\r\n\r\n<h2>The Power of Introspection</h2>\r\n<p>One of the first tasks in writing the new framework was to build\r\nits database interface.</p>\r\n<p>Python's introspection model had been significantly enhanced with the\r\nrelease of Python 2.2. We decided to use it to build a generic database\r\ninterface class based on a DBI 2.0 compliant database connector. In this\r\napproach, rather than writing queries or table-specific wrappers by\r\nhand, a meta-class abstracts all database queries into a single clean\r\nAPI.</p>\r\n<p>We create descendents of this meta-class to make an API for each table.\r\nEach table's class contains a few class constants that describe the\r\ncolumns in the database. This way we can add new tables to the overall API\r\nquickly and simply without having to worry about implementation\r\ndetails for any specific table.</p>\r\n<p>The API also uses meta-data to automatically validate and convert values\r\npassed to the database. This is done by a \"normalizer\" function that\r\nconverts the Python data types being passed through the API into valid SQL\r\nvalues.  The function also verifies types and formats that are not\r\nnecessarily checked by the database or by Python, such as phone numbers\r\nand ZIP codes.</p>\r\n\r\n<h2>Reusing Objects Everywhere</h2>\r\n<p>Once the database API was complete, we created a second layer of classes\r\non top of it. This higher level API implements the business logic for\r\nspecific applications, such as contact management or trouble ticket\r\nhandling.  It also prevents users from performing operations that are\r\ninconsistent with Rackspace's business practices, or assigning data that\r\nwould result in other types of high-level corruption of the data in the\r\ndatabase.</p>\r\n<p>With the creation of this second layer, we achieved our original goal\r\nof Core Objects Reused Everywhere. Programmers throughout the company\r\nbegan to use this API to implement interfaces to application\r\nfunctionality. This required little interaction with our API\r\ndevelopment team, and it could be done without fear of misusing the API.</p>\r\n<p>While we designed the API primarily for CORE, the central enterprise\r\napplication, it is reused in a number of other systems at Rackspace. For\r\nexample, one group built a SOAP server on top of the API, in order to\r\naccess it from their PHP applications. Other applications use the API\r\ndirectly, and it has been extremely gratifying to see our work reused\r\nand integrated so easily with other systems.</p>\r\n\r\n<h2>Integrating Python with Apache</h2>\r\n<p>With the API in place, our next task in developing CORE was to find a\r\nuseful templating module to integrate our Python code with HTML pages\r\nrunning on the Apache web server.</p>\r\n<p>After looking at a number of available Python-based templating modules,\r\nwe opted to create a simple parser of our own. Our approach was to convert\r\nserver-side template pages into Python servlets whose output is sent by\r\nthe HTTP server to the user's browser.</p>\r\n<p>Although this was a fairly simple exercise, we did run into some\r\nproblems stemming from our design of the CORE database meta-class. We\r\nfound that altering classes and modules at runtime, as is done by the\r\nmeta-class, violates guidelines imposed by Python's optional restricted\r\nexecution environment. Since we felt that restricted execution was a\r\nnecessary component in supporting a persistent web module, we opted to\r\ndeploy CORE using CGIs rather than mod_python or similar persistent\r\nsolutions.</p>\r\n<p>Since fast hardware and multiple servers are readily available, and\r\nsince and our template parser pre-compiles and caches the Python servlet\r\ncode that it produces, the CGI solution is sufficient for our needs.  It\r\nalso allows us to resolve issues such as database connection pooling and\r\nrestricting the execution environment outside of Python.</p>\r\n\r\n<h2>Unit Testing</h2>\r\n<p>Thanks to the unit testing module that comes with Python, our projects\r\nare reaching production with far fewer bugs than we had ever thought\r\npossible when we were using PHP. During maintenance with PHP, there was\r\nalways a question of whether a change in one place would break something\r\nelse in another part of the application.</p>\r\n<p>We now write unit tests for each and every API as the API is being\r\ndesigned. This means that we can verify the changes in one module as\r\nwell as its effects on all the others simply by running the unit tests\r\nfor the entire API.</p>\r\n<p>Since introducing Python and unit testing, the nature of the bugs that\r\nwe see in deployed applications has shifted to include primarily those\r\nin the user interface, such as layout problems or faulty event handling.</p>\r\n<p>These days, very few bugs come from the API itself, and even those are\r\ngenerally the result of poor revision management or DBA coordination\r\nduring application deployment. Python can't solve _all_ problems during\r\ndevelopment, but it certainly has reduced the number of critical system\r\ndefects for us.</p>\r\n\r\n<h2>Documentation</h2>\r\n<p>Lack of documentation has been a major problem with our previous\r\ndevelopment efforts. We tried several tools and policies to document our\r\nPHP efforts, but in the end these failed. Code changed too quickly, and\r\nthe code-level documentation tools available for PHP at the time were\r\ntoo finicky to justify the amount of effort required to get the\r\ndocumentation to parse correctly. Additionally, despite careful planning\r\nand coding strategies, the mixture of PHP and HTML made deciphering and\r\nunderstanding the code more difficult.</p>\r\n<p>Fortunately, Python was designed with documentation in mind, with the\r\nuse of \"doc strings\" for modules, classes and methods. Since\r\ndocumentation is actually a part of the language itself, and pydoc is a\r\nstandard module in the Python distribution, it was easy to extract API\r\ndocumentation to HTML and other formats.</p>\r\n<p>Over time, we have found that the syntactic structure of Python makes\r\nfor extremely readable code, and that in itself helps in the overall\r\ntask of documenting and maintaining code.</p>\r\n\r\n<h2>Conclusion</h2>\r\n<p>Python has dramatically improved development processes for the CORE\r\nproject, and it has led to the faster development times and more rapid\r\nreleases that allow us to keep up with Rackspace's ever-changing\r\nbusiness processes.</p>\r\n<p>Python enabled us to create a sophisticated dynamic data model that is\r\nflexible and easy to use for abstracting database operations. With it,\r\nwe realized our goal of Core Objects Reused Everywhere.</p>\r\n<p>Python's integrated unit testing and documentation tools greatly\r\nenhance our ability to deploy and maintain a more stable, error-free\r\nproduct.</p>\r\n<p>The result is a successful enterprise application that is instrumental\r\nin the delivery of Rackspace Managed Hosting's promise of Fanatical\r\nSupport, Unmatched Speed, and Unlimited Flexibility in the managed\r\nhosting industry.</p>\r\n\r\n<h2>About the Author</h2>\r\n<p><em>Nick Borko is the Director of Internal Application Development and the project manager for Rackspace's enterprise database application, CORE. Rackspace Managed Hosting is the leader in delivering managed hosting services to small and medium enterprises. All customer platforms include state-of-the-art data centers, customized servers, burstable connectivity, 99.999% uptime SLA, a dedicated account manager, instant\r\nemergency response and access to live expert technicians 24x7 for support of all hardware and core software. Founded in 1998 and headquartered in San Antonio, Texas, Rackspace manages servers for customers in more than 80 countries.</em></p>", 
        "content": "<h2>Introduction</h2>\r\n<p>To be the industry leader in Managed Hosting, you have to be fast and\r\nflexible. By using Python to implement our enterprise data systems,\r\n<a class=\"reference external\" href=\"http://www.rackspace.com/\">Rackspace</a> can quickly and effectively change its internal systems to keep up with shifts in the industry and in our own business processes.\r\nWe do this through a central customer information system called \"CORE,\"\r\nwhich is used both for Customer Relationship Management (CRM) and\r\nEnterprise Resource Planning (ERP). Python and CORE are key factors\r\nthat enable Rackspace to provide our Fanatical Support(tm) and faster\r\ncustomer service.</p>\r\n\r\n<h2>Background</h2>\r\n<p>Rackspace's central customer database started as a simple ERP system to\r\nprovision and track managed servers. It began humbly, as a small\r\ncollection of PHP pages that did the job nicely for the few hundred\r\nservers that was the beginning of Rackspace's customer base.</p>\r\n<p>As Rackspace grew, that small PHP system became the center of business\r\nat Rackspace. Every time an opportunity to automate a process presented\r\nitself, it was rolled into that system.</p>\r\n<p>After a couple of years, the result was a big, un-maintainable mess of\r\nthousands of PHP pages and modules that had been written and maintained\r\nprimarily by one person. The limits of PHP (then version 3) had been\r\nstretched thin, the system was too much for one person to maintain,\r\nand it was difficult to bring in new people to help with it.</p>\r\n<p><em>Rackspace Managed Hosting provides customized servers in state-of-the-art\r\ndata centers</em> <a class=\"reference external\" href=\"/files/success/rackspace/datacenter.jpg\">Zoom in</a></p>\r\n<p>Our first attempt to update the system came when PHP version 4 was\r\nreleased. This release promised better object oriented capabilities,\r\nand the time was right for Rackspace to dedicate more people to the\r\nproject.</p>\r\n<p>The system was totally redesigned from the ground up, including new\r\ndatabase schemas and application design strategies. At this time we\r\nre-dubbed the project \"CORE,\" an acronym for Core Objects Reused\r\nEverywhere, in order to reflect the overall design goal for CORE:\r\nmodularity and reusability across all systems in the company. With that\r\ngoal in mind, our team went to work using the object oriented features\r\nof PHP.</p>\r\n<p>While we were able to re-fit the application and add increased\r\nfunctionality, the project ultimately failed due in large part to the\r\nproblems encountered while using the object framework provided by PHP.</p>\r\n<p>Memory leaks, inconsistent interfaces, inconsistent internal data model,\r\nrandomly freed objects, multiple object copies despite explicit use of\r\nreferences, internal PHP errors, and untraceable code failures all but\r\nmade the task impossible to accomplish in PHP.</p>\r\n<p>Even after we achieved a relatively stable code base, we were nowhere\r\nnear our goal of Core Objects Reused Everywhere because we had to\r\ndepart from pure object-oriented methods just to work around the\r\nproblems inherent in PHP. It became clear that PHP was unsuitable for\r\nour large scale, mission critical projects. A new solution had to be\r\nfound.</p>\r\n\r\n<h2>Python in CORE</h2>\r\n<p>We had always considered Python to be an excellent candidate for\r\nimplementing our enterprise system, but it was initially passed over in\r\nfavor of building upon the existing (vast) code base we already had in\r\nPHP. At that time, we felt that PHP could be used successfully in CORE\r\nby introducing a better structured system design.</p>\r\n<p>Unfortunately, that wasn't enough to overcome our other problems with\r\nPHP, so we re-evaluated our situation. The first alpha version of Python\r\n2.2 had recently been released, and we decided to begin work on a new\r\nCORE framework using the new features that were available in that\r\nversion.</p>\r\n\r\n<h2>The Power of Introspection</h2>\r\n<p>One of the first tasks in writing the new framework was to build\r\nits database interface.</p>\r\n<p>Python's introspection model had been significantly enhanced with the\r\nrelease of Python 2.2. We decided to use it to build a generic database\r\ninterface class based on a DBI 2.0 compliant database connector. In this\r\napproach, rather than writing queries or table-specific wrappers by\r\nhand, a meta-class abstracts all database queries into a single clean\r\nAPI.</p>\r\n<p>We create descendents of this meta-class to make an API for each table.\r\nEach table's class contains a few class constants that describe the\r\ncolumns in the database. This way we can add new tables to the overall API\r\nquickly and simply without having to worry about implementation\r\ndetails for any specific table.</p>\r\n<p>The API also uses meta-data to automatically validate and convert values\r\npassed to the database. This is done by a \"normalizer\" function that\r\nconverts the Python data types being passed through the API into valid SQL\r\nvalues.  The function also verifies types and formats that are not\r\nnecessarily checked by the database or by Python, such as phone numbers\r\nand ZIP codes.</p>\r\n\r\n<h2>Reusing Objects Everywhere</h2>\r\n<p>Once the database API was complete, we created a second layer of classes\r\non top of it. This higher level API implements the business logic for\r\nspecific applications, such as contact management or trouble ticket\r\nhandling.  It also prevents users from performing operations that are\r\ninconsistent with Rackspace's business practices, or assigning data that\r\nwould result in other types of high-level corruption of the data in the\r\ndatabase.</p>\r\n<p>With the creation of this second layer, we achieved our original goal\r\nof Core Objects Reused Everywhere. Programmers throughout the company\r\nbegan to use this API to implement interfaces to application\r\nfunctionality. This required little interaction with our API\r\ndevelopment team, and it could be done without fear of misusing the API.</p>\r\n<p>While we designed the API primarily for CORE, the central enterprise\r\napplication, it is reused in a number of other systems at Rackspace. For\r\nexample, one group built a SOAP server on top of the API, in order to\r\naccess it from their PHP applications. Other applications use the API\r\ndirectly, and it has been extremely gratifying to see our work reused\r\nand integrated so easily with other systems.</p>\r\n\r\n<h2>Integrating Python with Apache</h2>\r\n<p>With the API in place, our next task in developing CORE was to find a\r\nuseful templating module to integrate our Python code with HTML pages\r\nrunning on the Apache web server.</p>\r\n<p>After looking at a number of available Python-based templating modules,\r\nwe opted to create a simple parser of our own. Our approach was to convert\r\nserver-side template pages into Python servlets whose output is sent by\r\nthe HTTP server to the user's browser.</p>\r\n<p>Although this was a fairly simple exercise, we did run into some\r\nproblems stemming from our design of the CORE database meta-class. We\r\nfound that altering classes and modules at runtime, as is done by the\r\nmeta-class, violates guidelines imposed by Python's optional restricted\r\nexecution environment. Since we felt that restricted execution was a\r\nnecessary component in supporting a persistent web module, we opted to\r\ndeploy CORE using CGIs rather than mod_python or similar persistent\r\nsolutions.</p>\r\n<p>Since fast hardware and multiple servers are readily available, and\r\nsince and our template parser pre-compiles and caches the Python servlet\r\ncode that it produces, the CGI solution is sufficient for our needs.  It\r\nalso allows us to resolve issues such as database connection pooling and\r\nrestricting the execution environment outside of Python.</p>\r\n\r\n<h2>Unit Testing</h2>\r\n<p>Thanks to the unit testing module that comes with Python, our projects\r\nare reaching production with far fewer bugs than we had ever thought\r\npossible when we were using PHP. During maintenance with PHP, there was\r\nalways a question of whether a change in one place would break something\r\nelse in another part of the application.</p>\r\n<p>We now write unit tests for each and every API as the API is being\r\ndesigned. This means that we can verify the changes in one module as\r\nwell as its effects on all the others simply by running the unit tests\r\nfor the entire API.</p>\r\n<p>Since introducing Python and unit testing, the nature of the bugs that\r\nwe see in deployed applications has shifted to include primarily those\r\nin the user interface, such as layout problems or faulty event handling.</p>\r\n<p>These days, very few bugs come from the API itself, and even those are\r\ngenerally the result of poor revision management or DBA coordination\r\nduring application deployment. Python can't solve _all_ problems during\r\ndevelopment, but it certainly has reduced the number of critical system\r\ndefects for us.</p>\r\n\r\n<h2>Documentation</h2>\r\n<p>Lack of documentation has been a major problem with our previous\r\ndevelopment efforts. We tried several tools and policies to document our\r\nPHP efforts, but in the end these failed. Code changed too quickly, and\r\nthe code-level documentation tools available for PHP at the time were\r\ntoo finicky to justify the amount of effort required to get the\r\ndocumentation to parse correctly. Additionally, despite careful planning\r\nand coding strategies, the mixture of PHP and HTML made deciphering and\r\nunderstanding the code more difficult.</p>\r\n<p>Fortunately, Python was designed with documentation in mind, with the\r\nuse of \"doc strings\" for modules, classes and methods. Since\r\ndocumentation is actually a part of the language itself, and pydoc is a\r\nstandard module in the Python distribution, it was easy to extract API\r\ndocumentation to HTML and other formats.</p>\r\n<p>Over time, we have found that the syntactic structure of Python makes\r\nfor extremely readable code, and that in itself helps in the overall\r\ntask of documenting and maintaining code.</p>\r\n\r\n<h2>Conclusion</h2>\r\n<p>Python has dramatically improved development processes for the CORE\r\nproject, and it has led to the faster development times and more rapid\r\nreleases that allow us to keep up with Rackspace's ever-changing\r\nbusiness processes.</p>\r\n<p>Python enabled us to create a sophisticated dynamic data model that is\r\nflexible and easy to use for abstracting database operations. With it,\r\nwe realized our goal of Core Objects Reused Everywhere.</p>\r\n<p>Python's integrated unit testing and documentation tools greatly\r\nenhance our ability to deploy and maintain a more stable, error-free\r\nproduct.</p>\r\n<p>The result is a successful enterprise application that is instrumental\r\nin the delivery of Rackspace Managed Hosting's promise of Fanatical\r\nSupport, Unmatched Speed, and Unlimited Flexibility in the managed\r\nhosting industry.</p>\r\n\r\n<h2>About the Author</h2>\r\n<p><em>Nick Borko is the Director of Internal Application Development and the project manager for Rackspace's enterprise database application, CORE. Rackspace Managed Hosting is the leader in delivering managed hosting services to small and medium enterprises. All customer platforms include state-of-the-art data centers, customized servers, burstable connectivity, 99.999% uptime SLA, a dedicated account manager, instant\r\nemergency response and access to live expert technicians 24x7 for support of all hardware and core software. Founded in 1998 and headquartered in San Antonio, Texas, Rackspace manages servers for customers in more than 80 countries.</em></p>", 
        "image": "successstories/datacenter-web.jpg", 
        "pull_quote": "Rackspace, the industry leader in Managed Hosting, uses Python to implement its enterprise data systems and to achieve true object reuse. They do this through a central customer information system called \"CORE,\" which is used both for Customer Relationship Management (CRM) and Enterprise Resource Planning (ERP). Python and CORE are key factors that enable Rackspace to provide our Fanatical Support(tm) and faster customer service.", 
        "category": 1, 
        "name": "Python is Rackspace's CORE Technology", 
        "company": 3, 
        "created": "2013-07-29T17:04:51.001Z", 
        "company_name": "Rackspace", 
        "creator": 1
    }, 
    "model": "successstories.story", 
    "pk": 1
},
{
    "fields": {
        "company_url": "http://www.ilm.com/", 
        "author": "Tim Fortenberry", 
        "content_markup_type": "html", 
        "is_published": true, 
        "slug": "industrial-light-magic-runs-python", 
        "updated": "2013-08-01T20:13:48.385Z", 
        "_content_rendered": "<h2>Background</h2>\r\n<p><a class=\"reference external\" href=\"http://www.ilm.com/\">Industrial Light &amp; Magic (ILM)</a> was started in 1975 by filmmaker George Lucas,\r\nin order to create the special effects for the original Star Wars film. Since\r\nthen, ILM has grown into a visual effects powerhouse that has contributed not\r\njust to the entire Star Wars series, but also to films as diverse as Forrest\r\nGump, Jurassic Park, Who Framed Roger Rabbit, Raiders of the Lost Ark, and\r\nTerminator 2. ILM has won numerous Academy Awards for Best Visual Effects, not\r\nto mention a string of Clio awards for its work on television advertisements.</p>\r\n<p>While much of ILM's early work was done with miniature models and motion\r\ncontrolled cameras, ILM has long been on the bleeding edge of computer\r\ngenerated visual effects. Its computer graphics division dates back to 1979,\r\nand its first CG production was the 1982 Genesis sequence from Star Trek II:\r\nThe Wrath of Khan.</p>\r\n<p>In the early days, ILM was involved with the creation of custom computer\r\ngraphics hardware and software for scanning, modeling, rendering, and\r\ncompositing (the process of joining rendered and scanned images together).\r\nSome of these systems made significant advances in areas such as morphing\r\nand simulating muscles and hair.</p>\r\n<p>Naturally, as time went by many of the early innovations at ILM made it into\r\nthe commercial realm, but the company's position on the cutting edge of visual\r\neffects technology continues to rely on an ever-changing combination of custom\r\nin-house technologies and commercial products.</p>\r\n<p>Today, ILM runs a batch processing environment capable of modeling, rendering\r\nand compositing tens of thousands of motion picture frames per day. Thousands\r\nof machines running Linux, IRIX, Compaq Tru64, OS X, Solaris, and Windows\r\njoin together to provide a production pipeline that is used by approximately\r\neight hundred users daily, many of whom write or modify code that controls\r\nevery step of the production process. In this context, hundreds of commercial\r\nand in-house software components are combined to create and process each frame\r\nof computer-generated or enhanced film.</p>\r\n<p>Making all this work, and keeping it working, requires a certain degree of\r\ntechnical wizardry, as well as a tool set that is up to the task of integrating\r\ndiverse and frequently changing systems.</p>\r\n\r\n<h2>Enter Python</h2>\r\n<p>Back in 1996, in the 101 Dalmation days, ILM was exclusively an SGI IRIX shop,\r\nand the production pipeline was controlled by Unix shell scripting. At that\r\ntime, ILM was producing 15-30 shots per show, typically only a small part of\r\neach feature length film to which they were contributing.</p>\r\n<p>Looking ahead towards more CG-intensive films, ILM staff began to search for\r\nways to control an increasingly complex and compute-intensive production\r\nprocess.</p>\r\n<p>It was around this time that Python version 1.4 came out, and Python\r\nwas coming into its own as a powerful yet simple language that could be\r\nused to replace Unix shell scripting. Python was evaluated, compared to\r\nother technologies available at the time (such as Tcl and Perl), and\r\nchosen as an easier to learn and use language with which to\r\nincrementally replace older scripts.</p>\r\n<p>At ILM, speed of development is key, and Python was a faster way to code (and\r\nre-code) the programs that controlled the production pipeline.</p>\r\n\r\n<h2>Python Streamlines Production</h2>\r\n<p>But Python was not designed just as a replacement for shell scripting and, as\r\nit turns out, Python enabled much more for ILM than just process control.</p>\r\n<p>Unlike Unix shell scripting, Python can be embedded whole as a scripting\r\nlanguage within a larger software system. In this case, Python code can\r\ninvoke specific functions of that system, even if those functions are written\r\nin C or C++.  And C and C++ code can easily make calls back into Python code\r\nas well.</p>\r\n<p>Using this capability, ILM integrated Python into custom applications\r\nwritten in C or C++, such as ILM's in-house lighting tool, which is\r\nused to place light sources into a 3D scene and to facilitate the\r\nwriting, generation, and previewing of shaders and materials used on CG\r\nelements. It is the lighting tool that is ultimately responsible for\r\nwriting the 3D scene out to a format that a renderer can interpret and\r\nrender.</p>\r\n<p>At the same time, more and more components, such as those responsible\r\nfor ILM's many custom file formats and data structures, were re-wrapped\r\nas Python extension modules</p>\r\n<p>As Python was used more widely, extending and customizing in-house\r\nsoftware became a lot easier. By writing in Python, users could\r\nrecombine wrapped software components and extend or enhance standard\r\nCG applications needed for each new image production run. This let\r\nILM staff to do exactly what a production needed at any given time,\r\nwhether that meant allowing for a specific look for an entire show, or\r\njust a single CG character or element.</p>\r\n<p>As it turned out, even some of ILM's non-technical users were able to\r\nlearn enough Python to develop simple plug-ins and to create and modify\r\nproduction control scripts along side the technical users.</p>\r\n\r\n<h2>Python Unifies the Toolset</h2>\r\n<p>Encouraged by its successes in batch process control and in scripting applications\r\nand software components, ILM started to use Python in other applications as well.</p>\r\n<p>Python is now used for tracking and auditing functionality within the\r\nproduction pipeline, where an Oracle database keeps track of the hundreds of\r\nthousands of images that are created and processed for each film. DCOracle2,\r\none of the Oracle integration libraries available for Python, has performed\r\nwell in this task and is now in use on Linux, IRIX, Tru64, and Solaris.</p>\r\n<p>Python is also used to develop the CG artist's interface to ILM's asset\r\nmanagement system. Designed to be modular, this tool has been enhanced\r\nby a large group of developers and non-developers alike to extend well\r\nbeyond its original mandate. The application is now used not only to\r\nmanage CG assets and elements, but also in daily shot review, as a\r\nnetwork-based whiteboard, as an instant messenger, and even allows an\r\noccasional game of chess.</p>\r\n<p>As Python was applied in more ways, it slowly crowded out a plethora of\r\ncompeting technologies for shell scripting and batch control, embedded\r\nscripting, component software development, database application development,\r\nand so forth. Python's versatility ultimately simplified the developers'\r\ntoolset and reduced the number of technologies that needed to be deployed to\r\nILM's thousands of production computers. This new, simpler toolset translated\r\ndirectly into an easier to manage and more reliable development and production\r\nprocess.</p>\r\n\r\n<h2>Hardware Costs Reduced</h2>\r\n<p>Although chosen initially for its ease of use and integration capabilities,\r\nPython's portability to many other operating systems eventually became one of\r\nits key strengths.</p>\r\n<p>Once Python was in use, it made the production control system portable.\r\nThis gave ILM additional freedom in making hardware technology choices,\r\nincluding a large-scale introduction of commodity PC hardware and\r\nLinux, a move that has saved the company substantial amounts of money\r\nin recent years.</p>\r\n\r\n<h2>Source Code Access Important</h2>\r\n<p>After having used Python intensively for six years, ILM has yet to run into\r\nsignificant bugs or portability issues with the language. As a result, ILM has\r\nsince Python 1.5 been able to rely on stock distributions in unmodified form.</p>\r\n<p>However, availability of source code for the language acts as an important\r\ninsurance policy should problems arise in the future, or should custom\r\nextensions or improvements become necessary. Without this, ILM could never\r\nhave bought into Python so heavily for its mission-critical production\r\nprocess.</p>\r\n<p>One case where access to source has already been beneficial was in ILM's\r\ncontinued use of Python 1.4, which is generally considered obsolete. Because\r\nthe production facility is under continuous use, upgrading systems to new\r\nPython versions would result in significant disruption of the production\r\nprocess.</p>\r\n<p>Instead, ILM installs new systems with newer versions of Python but\r\nmaintains older systems only so they can run the same scripts as the\r\nnewer systems. Supporting this mix has relied on access to the Python\r\nsources in order to back-port some changes found in newer Python\r\nversions, and to reimplement portions of newer support libraries under\r\nolder versions of Python. ILM is currently running a mix of Python 1.4,\r\n1.5, and 2.1.</p>\r\n\r\n<h2>Python Tested by Time</h2>\r\n<p>The visual effects industry is intensely competitive. To stay on top of the\r\nheap, ILM continuously reviews its production methods and evaluates new\r\ntechnologies as they become available.</p>\r\n<p>Since its adoption in 1996, the use of Python has also been reviewed numerous\r\ntimes.  Each time, ILM failed to find a more compelling solution. Python's\r\nunique mix of simplicity and power continues to be the best available choice\r\nfor controlling ILM's complex and changing computing environment.</p>\r\n\r\n<h2>About the Author</h2>\r\n<p>&nbsp;Tim Fortenberry joined Industrial Light &amp; Magic in 1999 as an intern.\r\nLater that same year he began to work full time in the Resources\r\ndepartment. He worked as a scripts/tools programmer. Shortly after,\r\nFortenberry joined the Research and Development department.&nbsp; He is one of\r\nthe founding members of the Pipeline and TD Tools groups that helped\r\nbridge the gap between artists and technology.</p>\r\n<p>As an engineer, Fortenberry is responsible for developing and maintaining\r\nthe myriad of applications used for rendering and pipline control flow of\r\nimages at ILM. Prior to joining ILM, Fortenberry worked as a Linux\r\nsystems administrator for VA Linux Systems.</p>\r\n<p>Originally from Southern California, Fortenberry received his Bachelor of\r\nArts degree from the University of California at Berkeley in Anthropology\r\nwith an emphasis in Archaeology.</p>\r\n", 
        "content": "<h2>Background</h2>\r\n<p><a class=\"reference external\" href=\"http://www.ilm.com/\">Industrial Light &amp; Magic (ILM)</a> was started in 1975 by filmmaker George Lucas,\r\nin order to create the special effects for the original Star Wars film. Since\r\nthen, ILM has grown into a visual effects powerhouse that has contributed not\r\njust to the entire Star Wars series, but also to films as diverse as Forrest\r\nGump, Jurassic Park, Who Framed Roger Rabbit, Raiders of the Lost Ark, and\r\nTerminator 2. ILM has won numerous Academy Awards for Best Visual Effects, not\r\nto mention a string of Clio awards for its work on television advertisements.</p>\r\n<p>While much of ILM's early work was done with miniature models and motion\r\ncontrolled cameras, ILM has long been on the bleeding edge of computer\r\ngenerated visual effects. Its computer graphics division dates back to 1979,\r\nand its first CG production was the 1982 Genesis sequence from Star Trek II:\r\nThe Wrath of Khan.</p>\r\n<p>In the early days, ILM was involved with the creation of custom computer\r\ngraphics hardware and software for scanning, modeling, rendering, and\r\ncompositing (the process of joining rendered and scanned images together).\r\nSome of these systems made significant advances in areas such as morphing\r\nand simulating muscles and hair.</p>\r\n<p>Naturally, as time went by many of the early innovations at ILM made it into\r\nthe commercial realm, but the company's position on the cutting edge of visual\r\neffects technology continues to rely on an ever-changing combination of custom\r\nin-house technologies and commercial products.</p>\r\n<p>Today, ILM runs a batch processing environment capable of modeling, rendering\r\nand compositing tens of thousands of motion picture frames per day. Thousands\r\nof machines running Linux, IRIX, Compaq Tru64, OS X, Solaris, and Windows\r\njoin together to provide a production pipeline that is used by approximately\r\neight hundred users daily, many of whom write or modify code that controls\r\nevery step of the production process. In this context, hundreds of commercial\r\nand in-house software components are combined to create and process each frame\r\nof computer-generated or enhanced film.</p>\r\n<p>Making all this work, and keeping it working, requires a certain degree of\r\ntechnical wizardry, as well as a tool set that is up to the task of integrating\r\ndiverse and frequently changing systems.</p>\r\n\r\n<h2>Enter Python</h2>\r\n<p>Back in 1996, in the 101 Dalmation days, ILM was exclusively an SGI IRIX shop,\r\nand the production pipeline was controlled by Unix shell scripting. At that\r\ntime, ILM was producing 15-30 shots per show, typically only a small part of\r\neach feature length film to which they were contributing.</p>\r\n<p>Looking ahead towards more CG-intensive films, ILM staff began to search for\r\nways to control an increasingly complex and compute-intensive production\r\nprocess.</p>\r\n<p>It was around this time that Python version 1.4 came out, and Python\r\nwas coming into its own as a powerful yet simple language that could be\r\nused to replace Unix shell scripting. Python was evaluated, compared to\r\nother technologies available at the time (such as Tcl and Perl), and\r\nchosen as an easier to learn and use language with which to\r\nincrementally replace older scripts.</p>\r\n<p>At ILM, speed of development is key, and Python was a faster way to code (and\r\nre-code) the programs that controlled the production pipeline.</p>\r\n\r\n<h2>Python Streamlines Production</h2>\r\n<p>But Python was not designed just as a replacement for shell scripting and, as\r\nit turns out, Python enabled much more for ILM than just process control.</p>\r\n<p>Unlike Unix shell scripting, Python can be embedded whole as a scripting\r\nlanguage within a larger software system. In this case, Python code can\r\ninvoke specific functions of that system, even if those functions are written\r\nin C or C++.  And C and C++ code can easily make calls back into Python code\r\nas well.</p>\r\n<p>Using this capability, ILM integrated Python into custom applications\r\nwritten in C or C++, such as ILM's in-house lighting tool, which is\r\nused to place light sources into a 3D scene and to facilitate the\r\nwriting, generation, and previewing of shaders and materials used on CG\r\nelements. It is the lighting tool that is ultimately responsible for\r\nwriting the 3D scene out to a format that a renderer can interpret and\r\nrender.</p>\r\n<p>At the same time, more and more components, such as those responsible\r\nfor ILM's many custom file formats and data structures, were re-wrapped\r\nas Python extension modules</p>\r\n<p>As Python was used more widely, extending and customizing in-house\r\nsoftware became a lot easier. By writing in Python, users could\r\nrecombine wrapped software components and extend or enhance standard\r\nCG applications needed for each new image production run. This let\r\nILM staff to do exactly what a production needed at any given time,\r\nwhether that meant allowing for a specific look for an entire show, or\r\njust a single CG character or element.</p>\r\n<p>As it turned out, even some of ILM's non-technical users were able to\r\nlearn enough Python to develop simple plug-ins and to create and modify\r\nproduction control scripts along side the technical users.</p>\r\n\r\n<h2>Python Unifies the Toolset</h2>\r\n<p>Encouraged by its successes in batch process control and in scripting applications\r\nand software components, ILM started to use Python in other applications as well.</p>\r\n<p>Python is now used for tracking and auditing functionality within the\r\nproduction pipeline, where an Oracle database keeps track of the hundreds of\r\nthousands of images that are created and processed for each film. DCOracle2,\r\none of the Oracle integration libraries available for Python, has performed\r\nwell in this task and is now in use on Linux, IRIX, Tru64, and Solaris.</p>\r\n<p>Python is also used to develop the CG artist's interface to ILM's asset\r\nmanagement system. Designed to be modular, this tool has been enhanced\r\nby a large group of developers and non-developers alike to extend well\r\nbeyond its original mandate. The application is now used not only to\r\nmanage CG assets and elements, but also in daily shot review, as a\r\nnetwork-based whiteboard, as an instant messenger, and even allows an\r\noccasional game of chess.</p>\r\n<p>As Python was applied in more ways, it slowly crowded out a plethora of\r\ncompeting technologies for shell scripting and batch control, embedded\r\nscripting, component software development, database application development,\r\nand so forth. Python's versatility ultimately simplified the developers'\r\ntoolset and reduced the number of technologies that needed to be deployed to\r\nILM's thousands of production computers. This new, simpler toolset translated\r\ndirectly into an easier to manage and more reliable development and production\r\nprocess.</p>\r\n\r\n<h2>Hardware Costs Reduced</h2>\r\n<p>Although chosen initially for its ease of use and integration capabilities,\r\nPython's portability to many other operating systems eventually became one of\r\nits key strengths.</p>\r\n<p>Once Python was in use, it made the production control system portable.\r\nThis gave ILM additional freedom in making hardware technology choices,\r\nincluding a large-scale introduction of commodity PC hardware and\r\nLinux, a move that has saved the company substantial amounts of money\r\nin recent years.</p>\r\n\r\n<h2>Source Code Access Important</h2>\r\n<p>After having used Python intensively for six years, ILM has yet to run into\r\nsignificant bugs or portability issues with the language. As a result, ILM has\r\nsince Python 1.5 been able to rely on stock distributions in unmodified form.</p>\r\n<p>However, availability of source code for the language acts as an important\r\ninsurance policy should problems arise in the future, or should custom\r\nextensions or improvements become necessary. Without this, ILM could never\r\nhave bought into Python so heavily for its mission-critical production\r\nprocess.</p>\r\n<p>One case where access to source has already been beneficial was in ILM's\r\ncontinued use of Python 1.4, which is generally considered obsolete. Because\r\nthe production facility is under continuous use, upgrading systems to new\r\nPython versions would result in significant disruption of the production\r\nprocess.</p>\r\n<p>Instead, ILM installs new systems with newer versions of Python but\r\nmaintains older systems only so they can run the same scripts as the\r\nnewer systems. Supporting this mix has relied on access to the Python\r\nsources in order to back-port some changes found in newer Python\r\nversions, and to reimplement portions of newer support libraries under\r\nolder versions of Python. ILM is currently running a mix of Python 1.4,\r\n1.5, and 2.1.</p>\r\n\r\n<h2>Python Tested by Time</h2>\r\n<p>The visual effects industry is intensely competitive. To stay on top of the\r\nheap, ILM continuously reviews its production methods and evaluates new\r\ntechnologies as they become available.</p>\r\n<p>Since its adoption in 1996, the use of Python has also been reviewed numerous\r\ntimes.  Each time, ILM failed to find a more compelling solution. Python's\r\nunique mix of simplicity and power continues to be the best available choice\r\nfor controlling ILM's complex and changing computing environment.</p>\r\n\r\n<h2>About the Author</h2>\r\n<p>&nbsp;Tim Fortenberry joined Industrial Light &amp; Magic in 1999 as an intern.\r\nLater that same year he began to work full time in the Resources\r\ndepartment. He worked as a scripts/tools programmer. Shortly after,\r\nFortenberry joined the Research and Development department.&nbsp; He is one of\r\nthe founding members of the Pipeline and TD Tools groups that helped\r\nbridge the gap between artists and technology.</p>\r\n<p>As an engineer, Fortenberry is responsible for developing and maintaining\r\nthe myriad of applications used for rendering and pipline control flow of\r\nimages at ILM. Prior to joining ILM, Fortenberry worked as a Linux\r\nsystems administrator for VA Linux Systems.</p>\r\n<p>Originally from Southern California, Fortenberry received his Bachelor of\r\nArts degree from the University of California at Berkeley in Anthropology\r\nwith an emphasis in Archaeology.</p>\r\n", 
        "image": "successstories/ec029874277073c291_bulgariabridge01.jpg", 
        "pull_quote": "ILM runs a batch processing environment capable of modeling, rendering and compositing tens of thousands of motion picture frames per day. Thousands of machines running Linux, IRIX, Compaq Tru64, OS X, Solaris, and Windows join together to provide a production pipeline that is used by approximately eight hundred users daily, many of whom write or modify code that controls every step of the production process. Making all this work, and keeping it working, requires a certain degree of technical wizardry, as well as a tool set that is up to the task of integrating diverse and frequently changing systems. ", 
        "category": 2, 
        "name": "Industrial Light & Magic Runs on Python", 
        "company": 4, 
        "created": "2013-08-01T17:34:29.516Z", 
        "company_name": "Industrial Light & Magic", 
        "creator": 1
    }, 
    "model": "successstories.story", 
    "pk": 2
},
{
    "fields": {
        "company_url": "http://www.carmanah.com/", 
        "author": "George Belotsky and Thomas Major", 
        "content_markup_type": "html", 
        "is_published": true, 
        "slug": "carmanah-lights-way-python", 
        "updated": "2013-08-01T18:50:51.852Z", 
        "_content_rendered": "<h2>Introduction</h2>\r\n<p>This is a story about how Python's elegant design can make the language useful in an unexpected way.</p>\r\n<p>Carmanah Technologies Inc. (<a class=\"reference external\" href=\"http://www.carmanah.com/\">http://www.carmanah.com/</a>) was conceived\r\nin the middle of the Pacific Ocean. The founder, David Green, was\r\nsailing his boat from Fiji, bound for Victoria, British Columbia.  He\r\nwas running low on battery power for his navigation lights, and had an\r\ninsight.</p>\r\n<p>The eventual result of that mid-ocean idea was the world's first\r\nself-contained, fully autonomous marine navigation light.  During the\r\nday, each device uses solar power to recharge its integrated\r\nbatteries.  The light then operates from the stored charge at night.\r\nIn place of conventional bulbs, Carmanah's systems use long lasting,\r\nhigh-efficiency LEDs. The overall result is an exceptionally rugged\r\ndevice, sealed against the elements and requiring no maintenance.</p>\r\n<p>On occasion, lost Carmanah lights have drifted for thousands of miles\r\nupon the ocean currents, only to be recovered later -- in full working\r\norder.  This sort of reliability has made them famous amongst waterway\r\nauthorities, sailors and the coast guards of various countries.</p>\r\n<p>The technology born of the harsh marine environment has proven useful in many\r\nother areas, and today Carmanah is the world leader in solar-powered LED\r\nlighting. The company manufactures a whole line of such lights for a variety\r\nof different uses, including transit, roadway, railway, industrial markers and\r\nairfield illumination as well as the original marine application. The lights\r\nare sold all over the world, and must often with stand extreme conditions (the\r\nopen ocean, desert climates, the far north, urban vandals, etc.). Carmanah's\r\nlights have even been the subject of a documentary on national television.</p>\r\n<figure class=\"figure\">\r\n<img alt=\"Closeup of one crosswalk traffic beacon.\" src=\"http://python.org/files/success/carmanah/xwalk-closeup-web.jpg\">\r\n<figcaption>Closeup of a Carmanah crosswalk traffic beacon, a recent product in\r\nwhich Python has played a significant role.  The enclosure at the top\r\nof the pole is oriented towards the sun, to better expose the solar\r\npanels that it carries on the front. The antenna for the wireless link\r\nto a similar unit on the other side of the street is visible at the\r\nleft side of the enclosure.</figcaption>\r\n</figure>\r\n<p>Electric lighting has become so commonplace, it seems like a simple\r\nidea.  An autonomous, self-contained light, however, turns out to be a\r\ncomplicated thing indeed.  The amount of usable solar radiation varies\r\nwith the weather, the seasons, one's position on the earth, and the\r\norientation of the solar panel.  The battery state of charge must be\r\ncarefully managed to ensure long life and correct operation.\r\nAvailable power has to be monitored, and possibly rationed through the\r\nnight.</p>\r\n<p>Depending on the application, the light may also have to be\r\nprogrammable to emit internationally recognized flash codes, react to\r\nuser input, etc.  In even more complex situations, wireless networking\r\nis required to allow the lights to communicate with each other, or\r\nwith a central base station.</p>\r\n<p>A great deal of mechanical, electrical, electronic and optical design\r\nis required to create these lights.  As is typical of modern complex\r\ndevices, an embedded software program running on a microcontroller\r\noperates each unit, making it come to life.  Like a miniature version\r\nof the Monolith from <em>2001: A Space Odyssey</em>, each light maintains\r\nitself, ready to perform its function whenever the need arises.</p>\r\n\r\n<h2>The Future of Practical Computing</h2>\r\n<p>Current practical computer applications are dominated by the PC.  Yet,\r\njust like the mainframe before it, the PC will lose its central place\r\nin the use and deployment of computer technology.  Embedded systems --\r\ncomputers that are part of other devices -- will be the most prevalent\r\nin the future.</p>\r\n<p>The mainframe is far from being obsolete today, and the PC will\r\nlikewise remain important.  Most computers, however, will be\r\nincorporated into something else, rather than standing alone.  This\r\nprocess has already begun.  Automobiles employ multiple embedded\r\nsystems, some of which communicate with each other.  Embedded systems\r\nalso operate many household appliances.  Such systems are likewise\r\nvery important in industry, where they form a crucial element of many\r\ninstruments and tools.</p>\r\n<p>The catalyst for the future expansion of embedded systems is the rapid\r\nadvance of network technology. As the hardware becomes less\r\nexpensive, smaller, faster and more efficient in the use of electrical\r\npower, networks of embedded devices will proliferate and grow.  Such\r\ndevices -- in collaboration with one another -- will control homes,\r\noffices and industrial facilities.  Preparations for this new world of\r\ncomputing are underway now, as evidenced by the Cambridge-MIT\r\nInstitute's <em>Pervasive Computing</em> initiative (see <a class=\"reference external\" href=\"http://oxygen.lcs.mit.edu/\">http://oxygen.lcs.mit.edu/</a>).\r\nThe initiative has also been covered in a BBC story (see\r\n<a class=\"reference external\" href=\"http://news.bbc.co.uk/1/hi/technology/3583479.stm\">http://news.bbc.co.uk/1/hi/technology/3583479.stm</a>).</p>\r\n<p>The emergence of Pervasive Computing will make it necessary for each\r\nsystem to be very low maintenance.  When every user requires hundreds\r\nof devices, it is simply not feasible to service them all on a regular\r\nbasis.  Of course, fully self-contained systems that manage their own\r\npower would be ideal, because changing batteries or attaching wires is\r\na serious challenge if it needs to be done on a large scale.  Thus,\r\nthe miniature Monolith becomes a swarm.</p>\r\n\r\n<h2>The Importance of Python</h2>\r\n<p>Large scale deployment of embedded systems demands inexpensive\r\ncomponents.  Considerations such as small size, high reliability and\r\nlow power consumption are also very important.  Specialized processor\r\nchips, called microcontrollers, have been developed to meet these\r\ngoals.  Combining CPU, memory and peripherals (such as UARTs) on a\r\nsingle chip, modern microcontrollers are marvelous devices.  These\r\nfeatures, however, come at a significant price.  A typical\r\nmicrocontroller has only a few hundred bytes of RAM, several K of ROM\r\n(to store the program) and orders of magnitude less processing\r\ncapability than a conventional desktop microprocessor.  Hardly an\r\nenvironment for running Python!</p>\r\n<p>There are projects to adapt Python for embedded applications, but they\r\nrequire significant resources on the microcontroller, and are still in\r\nthe very early stages.  Surprisingly, however, it turns out that\r\nstandard Python is of tremendous value throughout an embedded system's\r\nlifecycle.  This is because the highly resource-constrained nature of\r\nembedded devices make them dependent on standard PCs for many tasks --\r\nboth during development and during deployment.</p>\r\n<p>For example, embedded software is compiled on conventional desktop\r\nsystems, and the resulting object code is then loaded onto the target\r\nmicrocontroller.  Another example is troubleshooting a device in the\r\nfield, which usually requires additional hardware to run a diagnostic\r\nutility.  Ordinary laptops are a very attractive platform for this\r\napplication, due to their ready availability and relatively high level\r\nof standardization.</p>\r\n<p>Thus, a major part of any embedded software development effort is\r\nwriting the required support code, to run on a standard PC.  There are\r\nquite a few languages available for this task, but the advantages of\r\nPython are many.  Python is quite easily learned by people from\r\nvarious programming backgrounds, such as Java, C or Visual Basic.\r\nAfter becoming familiar with Python, development proceeds very quickly\r\n-- perhaps faster than with any other language.  At the same time,\r\nPython lends itself to the creation of highly readable, compact and\r\nwell structured code.</p>\r\n<p>Python's particular mix of features also helps embedded developers be\r\nmore effective when programming a PC.  While these developers are well\r\nfamiliar with C (by far the most popular high level language for\r\nembedded systems) a C program written for a standard desktop or server\r\nis quite different in style from one for a microcontroller.</p>\r\n<p>The compactness of Python programs is especially important, because\r\nembedded developers have, by necessity, learned to express their\r\ndesigns in a very small amount of code.  Python's automated memory\r\nmanagement also helps, because many embedded developers have little\r\nexperience with dynamic memory allocation -- a technique that is not\r\npractical in most embedded environments.  In addition, the\r\nObject-Oriented facilities of Python are simple, powerful yet not\r\ncoercive.  This allows embedded developers (who are often less\r\nfamiliar with OOP) to gradually adopt the Object-Oriented paradigm in\r\ntheir work.</p>\r\n<p>As embedded systems grow in complexity, the advantage of using Python to\r\naugment traditional techniques becomes more and more important. At Carmanah,\r\nPython adoption (which began with the crosswalk traffic beacon, a\r\nsophisticated device that includes wireless networking) has spread to several\r\nkey areas of the embedded system's lifecycle.</p>\r\n<p>A Python program controls the software build process, allowing firmware for\r\ndifferent products to be put together from a large number of shared\r\ncomponents. The build system is simple yet a lot more flexible than makefiles,\r\nas well as easier to customize, configure and extend. Unlike the build tools\r\nsupplied by compiler vendors, the Python-based build system can work with\r\ndifferent compilers.</p>\r\n<p>Python is also used for stress tests and unit testing -- an aspect of\r\ndevelopment particularly vital in embedded systems, due to the\r\ninherent difficulty of upgrading devices once they are in the field.\r\nAdditional uses of Python, such as for control panels and code\r\ngeneration, are being considered as well.</p>\r\n<p>One very exciting application of Python at Carmanah is in the role of\r\na device simulator.  A simulator can act as a node in an embedded\r\nnetwork, while displaying the internal system state via animated\r\nimages on the screen.  Simulators are very valuable during the early\r\nstages of an embedded project, when little actual hardware is\r\navailable.  By taking the place of missing devices, simulators can\r\nallow software development to continue even before the hardware design\r\nis completed.</p>\r\n<p><em>Here is an illustration of the usefulness of Python in embedded\r\ndevelopment.  A prototype of Carmanah's crosswalk traffic beacon\r\ninteracts with a Python-based simulator running on an ordinary PC.\r\nThe simulator effectively completes the system, because two traffic\r\nbeacons (one for each side of the street) are required in a crosswalk\r\ninstallation.  In addition to significantly accelerating development,\r\na Python-based simulator can easily animate drawings, as shown.  This\r\nallows meaningful demonstrations of the system much earlier than would\r\notherwise have been possible.</em> <a class=\"reference external\" href=\"/files/success/carmanah/xwalk-proto-zoom.jpg\">Zoom in</a></p>\r\n<p>At Carmanah, Python has been used not only by experienced engineers,\r\nbut by student interns as well.  Even interns with little prior\r\nprogramming experience can accomplish quite a lot with Python, while\r\nrequiring less supervision than other languages demand.</p>\r\n\r\n<h2>Conclusion</h2>\r\n<p>The exciting work of creating self-contained, autonomous devices\r\ncontinues at Carmanah.  As the swarm of micro-Monoliths becomes reality,\r\nthe importance (and complexity) of the embedded software grows.  By\r\nmaking such software much easier to develop, test, control and deploy,\r\nPython is really lighting the way to the future of computing.</p>\r\n\r\n<h2>About the Authors</h2>\r\n<p><em>George Belotsky is a software architect who has done extensive work on high performance Internet servers as well as hard real time and embedded systems. His technology interests include C++, Python and Linux.  George Belotsky has written a number of articles (see</em> <a class=\"reference external\" href=\"http://www.oreillynet.com/pub/au/1204\">http://www.oreillynet.com/pub/au/1204</a> <em>) including a series on Python and Network I/O.  He is also the author of the Flightdeck-UI open\r\nsource project (</em> <a class=\"reference external\" href=\"http://openlight.com/fdui/\">http://openlight.com/fdui/</a><em>). You can reach him by email at questions at openlight.com.</em></p>\r\n<p><em>Thomas Major is the Product Development Manager at Carmanah, an electrical engineer by schooling with broad product design experience acquired at Visteon and Philips Electronics.  His interest started in analog circuit design, later embracing digital, software, and embedded design.</em></p>", 
        "content": "<h2>Introduction</h2>\r\n<p>This is a story about how Python's elegant design can make the language useful in an unexpected way.</p>\r\n<p>Carmanah Technologies Inc. (<a class=\"reference external\" href=\"http://www.carmanah.com/\">http://www.carmanah.com/</a>) was conceived\r\nin the middle of the Pacific Ocean. The founder, David Green, was\r\nsailing his boat from Fiji, bound for Victoria, British Columbia.  He\r\nwas running low on battery power for his navigation lights, and had an\r\ninsight.</p>\r\n<p>The eventual result of that mid-ocean idea was the world's first\r\nself-contained, fully autonomous marine navigation light.  During the\r\nday, each device uses solar power to recharge its integrated\r\nbatteries.  The light then operates from the stored charge at night.\r\nIn place of conventional bulbs, Carmanah's systems use long lasting,\r\nhigh-efficiency LEDs. The overall result is an exceptionally rugged\r\ndevice, sealed against the elements and requiring no maintenance.</p>\r\n<p>On occasion, lost Carmanah lights have drifted for thousands of miles\r\nupon the ocean currents, only to be recovered later -- in full working\r\norder.  This sort of reliability has made them famous amongst waterway\r\nauthorities, sailors and the coast guards of various countries.</p>\r\n<p>The technology born of the harsh marine environment has proven useful in many\r\nother areas, and today Carmanah is the world leader in solar-powered LED\r\nlighting. The company manufactures a whole line of such lights for a variety\r\nof different uses, including transit, roadway, railway, industrial markers and\r\nairfield illumination as well as the original marine application. The lights\r\nare sold all over the world, and must often with stand extreme conditions (the\r\nopen ocean, desert climates, the far north, urban vandals, etc.). Carmanah's\r\nlights have even been the subject of a documentary on national television.</p>\r\n<figure class=\"figure\">\r\n<img alt=\"Closeup of one crosswalk traffic beacon.\" src=\"http://python.org/files/success/carmanah/xwalk-closeup-web.jpg\">\r\n<figcaption>Closeup of a Carmanah crosswalk traffic beacon, a recent product in\r\nwhich Python has played a significant role.  The enclosure at the top\r\nof the pole is oriented towards the sun, to better expose the solar\r\npanels that it carries on the front. The antenna for the wireless link\r\nto a similar unit on the other side of the street is visible at the\r\nleft side of the enclosure.</figcaption>\r\n</figure>\r\n<p>Electric lighting has become so commonplace, it seems like a simple\r\nidea.  An autonomous, self-contained light, however, turns out to be a\r\ncomplicated thing indeed.  The amount of usable solar radiation varies\r\nwith the weather, the seasons, one's position on the earth, and the\r\norientation of the solar panel.  The battery state of charge must be\r\ncarefully managed to ensure long life and correct operation.\r\nAvailable power has to be monitored, and possibly rationed through the\r\nnight.</p>\r\n<p>Depending on the application, the light may also have to be\r\nprogrammable to emit internationally recognized flash codes, react to\r\nuser input, etc.  In even more complex situations, wireless networking\r\nis required to allow the lights to communicate with each other, or\r\nwith a central base station.</p>\r\n<p>A great deal of mechanical, electrical, electronic and optical design\r\nis required to create these lights.  As is typical of modern complex\r\ndevices, an embedded software program running on a microcontroller\r\noperates each unit, making it come to life.  Like a miniature version\r\nof the Monolith from <em>2001: A Space Odyssey</em>, each light maintains\r\nitself, ready to perform its function whenever the need arises.</p>\r\n\r\n<h2>The Future of Practical Computing</h2>\r\n<p>Current practical computer applications are dominated by the PC.  Yet,\r\njust like the mainframe before it, the PC will lose its central place\r\nin the use and deployment of computer technology.  Embedded systems --\r\ncomputers that are part of other devices -- will be the most prevalent\r\nin the future.</p>\r\n<p>The mainframe is far from being obsolete today, and the PC will\r\nlikewise remain important.  Most computers, however, will be\r\nincorporated into something else, rather than standing alone.  This\r\nprocess has already begun.  Automobiles employ multiple embedded\r\nsystems, some of which communicate with each other.  Embedded systems\r\nalso operate many household appliances.  Such systems are likewise\r\nvery important in industry, where they form a crucial element of many\r\ninstruments and tools.</p>\r\n<p>The catalyst for the future expansion of embedded systems is the rapid\r\nadvance of network technology. As the hardware becomes less\r\nexpensive, smaller, faster and more efficient in the use of electrical\r\npower, networks of embedded devices will proliferate and grow.  Such\r\ndevices -- in collaboration with one another -- will control homes,\r\noffices and industrial facilities.  Preparations for this new world of\r\ncomputing are underway now, as evidenced by the Cambridge-MIT\r\nInstitute's <em>Pervasive Computing</em> initiative (see <a class=\"reference external\" href=\"http://oxygen.lcs.mit.edu/\">http://oxygen.lcs.mit.edu/</a>).\r\nThe initiative has also been covered in a BBC story (see\r\n<a class=\"reference external\" href=\"http://news.bbc.co.uk/1/hi/technology/3583479.stm\">http://news.bbc.co.uk/1/hi/technology/3583479.stm</a>).</p>\r\n<p>The emergence of Pervasive Computing will make it necessary for each\r\nsystem to be very low maintenance.  When every user requires hundreds\r\nof devices, it is simply not feasible to service them all on a regular\r\nbasis.  Of course, fully self-contained systems that manage their own\r\npower would be ideal, because changing batteries or attaching wires is\r\na serious challenge if it needs to be done on a large scale.  Thus,\r\nthe miniature Monolith becomes a swarm.</p>\r\n\r\n<h2>The Importance of Python</h2>\r\n<p>Large scale deployment of embedded systems demands inexpensive\r\ncomponents.  Considerations such as small size, high reliability and\r\nlow power consumption are also very important.  Specialized processor\r\nchips, called microcontrollers, have been developed to meet these\r\ngoals.  Combining CPU, memory and peripherals (such as UARTs) on a\r\nsingle chip, modern microcontrollers are marvelous devices.  These\r\nfeatures, however, come at a significant price.  A typical\r\nmicrocontroller has only a few hundred bytes of RAM, several K of ROM\r\n(to store the program) and orders of magnitude less processing\r\ncapability than a conventional desktop microprocessor.  Hardly an\r\nenvironment for running Python!</p>\r\n<p>There are projects to adapt Python for embedded applications, but they\r\nrequire significant resources on the microcontroller, and are still in\r\nthe very early stages.  Surprisingly, however, it turns out that\r\nstandard Python is of tremendous value throughout an embedded system's\r\nlifecycle.  This is because the highly resource-constrained nature of\r\nembedded devices make them dependent on standard PCs for many tasks --\r\nboth during development and during deployment.</p>\r\n<p>For example, embedded software is compiled on conventional desktop\r\nsystems, and the resulting object code is then loaded onto the target\r\nmicrocontroller.  Another example is troubleshooting a device in the\r\nfield, which usually requires additional hardware to run a diagnostic\r\nutility.  Ordinary laptops are a very attractive platform for this\r\napplication, due to their ready availability and relatively high level\r\nof standardization.</p>\r\n<p>Thus, a major part of any embedded software development effort is\r\nwriting the required support code, to run on a standard PC.  There are\r\nquite a few languages available for this task, but the advantages of\r\nPython are many.  Python is quite easily learned by people from\r\nvarious programming backgrounds, such as Java, C or Visual Basic.\r\nAfter becoming familiar with Python, development proceeds very quickly\r\n-- perhaps faster than with any other language.  At the same time,\r\nPython lends itself to the creation of highly readable, compact and\r\nwell structured code.</p>\r\n<p>Python's particular mix of features also helps embedded developers be\r\nmore effective when programming a PC.  While these developers are well\r\nfamiliar with C (by far the most popular high level language for\r\nembedded systems) a C program written for a standard desktop or server\r\nis quite different in style from one for a microcontroller.</p>\r\n<p>The compactness of Python programs is especially important, because\r\nembedded developers have, by necessity, learned to express their\r\ndesigns in a very small amount of code.  Python's automated memory\r\nmanagement also helps, because many embedded developers have little\r\nexperience with dynamic memory allocation -- a technique that is not\r\npractical in most embedded environments.  In addition, the\r\nObject-Oriented facilities of Python are simple, powerful yet not\r\ncoercive.  This allows embedded developers (who are often less\r\nfamiliar with OOP) to gradually adopt the Object-Oriented paradigm in\r\ntheir work.</p>\r\n<p>As embedded systems grow in complexity, the advantage of using Python to\r\naugment traditional techniques becomes more and more important. At Carmanah,\r\nPython adoption (which began with the crosswalk traffic beacon, a\r\nsophisticated device that includes wireless networking) has spread to several\r\nkey areas of the embedded system's lifecycle.</p>\r\n<p>A Python program controls the software build process, allowing firmware for\r\ndifferent products to be put together from a large number of shared\r\ncomponents. The build system is simple yet a lot more flexible than makefiles,\r\nas well as easier to customize, configure and extend. Unlike the build tools\r\nsupplied by compiler vendors, the Python-based build system can work with\r\ndifferent compilers.</p>\r\n<p>Python is also used for stress tests and unit testing -- an aspect of\r\ndevelopment particularly vital in embedded systems, due to the\r\ninherent difficulty of upgrading devices once they are in the field.\r\nAdditional uses of Python, such as for control panels and code\r\ngeneration, are being considered as well.</p>\r\n<p>One very exciting application of Python at Carmanah is in the role of\r\na device simulator.  A simulator can act as a node in an embedded\r\nnetwork, while displaying the internal system state via animated\r\nimages on the screen.  Simulators are very valuable during the early\r\nstages of an embedded project, when little actual hardware is\r\navailable.  By taking the place of missing devices, simulators can\r\nallow software development to continue even before the hardware design\r\nis completed.</p>\r\n<p><em>Here is an illustration of the usefulness of Python in embedded\r\ndevelopment.  A prototype of Carmanah's crosswalk traffic beacon\r\ninteracts with a Python-based simulator running on an ordinary PC.\r\nThe simulator effectively completes the system, because two traffic\r\nbeacons (one for each side of the street) are required in a crosswalk\r\ninstallation.  In addition to significantly accelerating development,\r\na Python-based simulator can easily animate drawings, as shown.  This\r\nallows meaningful demonstrations of the system much earlier than would\r\notherwise have been possible.</em> <a class=\"reference external\" href=\"/files/success/carmanah/xwalk-proto-zoom.jpg\">Zoom in</a></p>\r\n<p>At Carmanah, Python has been used not only by experienced engineers,\r\nbut by student interns as well.  Even interns with little prior\r\nprogramming experience can accomplish quite a lot with Python, while\r\nrequiring less supervision than other languages demand.</p>\r\n\r\n<h2>Conclusion</h2>\r\n<p>The exciting work of creating self-contained, autonomous devices\r\ncontinues at Carmanah.  As the swarm of micro-Monoliths becomes reality,\r\nthe importance (and complexity) of the embedded software grows.  By\r\nmaking such software much easier to develop, test, control and deploy,\r\nPython is really lighting the way to the future of computing.</p>\r\n\r\n<h2>About the Authors</h2>\r\n<p><em>George Belotsky is a software architect who has done extensive work on high performance Internet servers as well as hard real time and embedded systems. His technology interests include C++, Python and Linux.  George Belotsky has written a number of articles (see</em> <a class=\"reference external\" href=\"http://www.oreillynet.com/pub/au/1204\">http://www.oreillynet.com/pub/au/1204</a> <em>) including a series on Python and Network I/O.  He is also the author of the Flightdeck-UI open\r\nsource project (</em> <a class=\"reference external\" href=\"http://openlight.com/fdui/\">http://openlight.com/fdui/</a><em>). You can reach him by email at questions at openlight.com.</em></p>\r\n<p><em>Thomas Major is the Product Development Manager at Carmanah, an electrical engineer by schooling with broad product design experience acquired at Visteon and Philips Electronics.  His interest started in analog circuit design, later embracing digital, software, and embedded design.</em></p>", 
        "image": "", 
        "pull_quote": "Python's particular mix of features helps embedded developers be\r\nmore effective when programming a PC.  While these developers are well\r\nfamiliar with C (by far the most popular high level language for\r\nembedded systems) a C program written for a standard desktop or server\r\nis quite different in style from one for a microcontroller. ", 
        "category": 7, 
        "name": "Carmanah Lights the Way with Python", 
        "company": null, 
        "created": "2013-08-01T17:45:26.164Z", 
        "company_name": "Carmanah Technologies", 
        "creator": 1
    }, 
    "model": "successstories.story", 
    "pk": 3
}
]
